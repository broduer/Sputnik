#include-once
#require-once
	Class Computable
	{
		abstract Function Calculate($Left, $Right) { }
	}

	[
	Terminal("(EOF)")
	Terminal("(Error)")
	Terminal("(Whitespace)")
	Terminal("(")
	Terminal(")")
	] : SpecialToken
	Class myUselessTerminals{}
	
	[Terminal("Float")] : SpecialToken
	Class myFloat
	{
		my $value;
		Function __Construct($str)
		{
			$value = (Double)$str;
		}
	}
	
	[Terminal("Integer")] : SpecialToken
	Class myInteger
	{
		my $value;
		Function __Construct($str)
		{
			$value = (Double)$str;
		}
	}
	
	[Rule("<Negate Exp> ::= ~'-' <Value>")] : SpecialToken
	Class Negate
	{
		my $value;
		Function __Construct($val)
		{
			$value = -$val->$value;
		}
	}
	
	[Terminal("+")] : SpecialToken
	Class opPlus extends Computable
	{
		override Function Calculate($Left, $Right)
		{
			return $Left += $Right;
		}
	}
	
	[Terminal("-")] : SpecialToken
	Class opMinus extends Computable
	{
		override Function Calculate($Left, $Right)
		{
			return $Left -= $Right;
		}
	}
	
	[Terminal("*")] : SpecialToken
	Class opMult extends Computable
	{
		override Function Calculate($Left, $Right)
		{
			return $Left *= $Right;
		}
	}
	
	[Terminal("/")] : SpecialToken
	Class opDivide extends Computable
	{
		override Function Calculate($Left, $Right)
		{
			return $Left /= $Right;
		}
	}
	
	[
	Rule("<Expression> ::= <Expression> '+' <Mult Exp>")
	Rule("<Expression> ::= <Expression> '-' <Mult Exp>")
	Rule("<Mult Exp> ::= <Mult Exp> '/' <Negate Exp>")
	Rule("<Mult Exp> ::= <Mult Exp> '*' <Negate Exp>")
	] : SpecialToken
	Class Operation
	{
		my $value;
		Function __Construct($Left, $OP, $Right)
		{
			$value = $OP->Calculate($Left->$value, $Right->$value);
		}
	}

my $Trims = array( "<Value> ::= '(' <Expression> ')'" => "<Expression>" );
Global $Parser = Parser(@"./lib/TestCases/ParserTest.cgt", "SpecialToken", $Trims);		
Global $SUCCESS = 0;
Global $FAIL = 0;
println("[ParserTest] Begins");
ParserTest1();
println("[ParserTest] Total success '$SUCCESS' fails '$FAIL'");	
Function ParserTest1()
{
	println("Parser Test 1");
	my $Done = false;
	my $ReturnToken = Parse($Parser, '100 * (2 + (500/2+1)) * 2');
	if(IsVarClass($ReturnToken, 'Operation'))
	{
		if($ReturnToken->$Value == 50600)
			$Done = true;
	}		
	if($Done)
	{
		println("PASS");
		$SUCCESS++;
	}
	else
	{
		println("FAIL");
		$FAIL++; inputc();
	}
}