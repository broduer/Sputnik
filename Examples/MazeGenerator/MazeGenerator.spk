Class MazeGenerator
{
	// Public Variables
	my $ready;
	my $maze;
	my $width;
	my $height;
	// Constructor
	Function __construct($_width, $_height)
	{
		$ready = false;
		$maze = null;
		$width = atoi($_width) * 2 + 3;
		$height = atoi($_height) * 2 + 3;
		if($width < 7 || $height < 7)
			return;
		$maze = BinaryCreate($width * $height);
		GenerateMaze();
		$ready = true;
	}
	// Helper function for random number generation
	Function CRand()
	{
		return (int)Random(0, 32768, 0);
	}
	// Convert the maze into a string
	Function StringOfMaze()
	{
		my $sb = sbNew();
		my List($x, $y);
		for($y = 0; $y < $height; $y++) 
		{
			for($x = 0; $x < $width; $x++) 
			{
				switch($maze[($y * $width) + $x])
				{
					case 1:
						sbAppend($sb, '[]');
						break;
					case 2:
						sbAppend($sb, '<>');
						break;
					default:
						sbAppend($sb, '  ');
						break;
				}
			}
			sbAppend($sb, "\n");
		}
		my $final = sbToString($sb);
		unset($sb);
		return $final;
	}
	// Print out the maze in text to console window
	Function ShowMaze()
	{
		print StringOfMaze();
	}
	//  Carve the maze starting at x, y.
	Function CarveMaze($x, $y)
	{
		my List($x1, $y1);
		my List($x2, $y2);
		my List($dx, $dy);
		my List($dir, $count);
		$dir = CRand() % 4;
		$count = 0;
		while($count < 4)
		{
			$dx = 0;
			$dy = 0;
			switch($dir)
			{
				case 0:
					$dx = 1;
					break;
				case 1:
					$dy = 1;
					break;
				case 2:
					$dx = -1;
					break;
				default:
					$dy = -1;
					break;
			}
			$x1 = $x + $dx;
			$y1 = $y + $dy;
			$x2 = $x1 + $dx;
			$y2 = $y1 + $dy;
			if(	$x2 > 0 && $x2 < $width && $y2 > 0 && $y2 < $height &&
				$maze[$y1 * $width + $x1] == 1 && $maze[$y2 * $width + $x2] == 1
				)
			{
				$maze[$y1 * $width + $x1] = 0;
				$maze[$y2 * $width + $x2] = 0;
				$x = $x2;
				$y = $y2;
				$dir = CRand() % 4;
				$count = 0;
			}
			else
			{
				$dir = ($dir + 1) % 4;
				$count += 1;
			}
		}
	}
	// Generate maze in matrix maze with size width, height.
	Function GenerateMaze()
	{
		my List($x, $y);
		// Initialize the maze.
		for($x = 0; $x < $width * $height; $x++) 
			$maze[$x] = 1;
		$maze[1 * $width + 1] = 0;
		// Carve the maze.
		for($y = 1; $y < $height; $y += 2)
		{
			for($x = 1; $x < $width; $x += 2)
			{
				CarveMaze($x, $y);
			}
		}
		// Set up the entry and exit.
		$maze[0 * $width + 1] = 0;
		$maze[($height - 1) * $width + ($width - 2)] = 0;
	}
	// Solve the maze.
	Function SolveMaze()
	{
		my List ($dir, $count);
		my List ($x, $y);
		my List ($dx, $dy);
		my $forward;
		// Remove the entry and exit.
		$maze[0 * $width + 1] = 1;
		$maze[($height - 1) * $width + ($width - 2)] = 1;	
		$forward = 1;
		$dir = 0;
		$count = 0;
		$x = 1;
		$y = 1;
		while($x != $width - 2 || $y != $height - 2)
		{
			$dx = 0;
			$dy = 0;
			switch($dir)
			{
				case 0:
					$dx = 1;
					break;
				case 1:
					$dy = 1;
					break;
				case 2:
					$dx = -1;
					break;
				default:
					$dy = -1;
					break;
			}
			if(
					($forward  && $maze[($y + $dy) * $width + ($x + $dx)] == 0)
					||
					(!$forward && $maze[($y + $dy) * $width + ($x + $dx)] == 2)
				)
			{
				$maze[$y * $width + $x] = $forward ? 2 : 3;
				$x += $dx;
				$y += $dy;
				$forward = 1;
				$count = 0;
				$dir = 0;
			}
			else
			{
				$dir = ($dir + 1) % 4;
				$count += 1;
				if($count > 3)
				{
					$forward = 0;
					$count = 0;
				}
			}
		}	
		/* Replace the entry and exit. */
		$maze[($height - 2) * $width + ($width - 2)] = 2;
		$maze[($height - 1) * $width + ($width - 2)] = 2;
	}
}

// loop forever
while(true)
{
	// clear console
	cls;
	// generate a random maze
	my $m = new MazeGenerator(15, 10);
	// show the maze in text form
	$m->ShowMaze();
	// clean up
	unset($m);
	// pause for user to see the maze
	pause;
}